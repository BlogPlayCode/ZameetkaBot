# –∏–º–ø–æ—Ä—Ç—ã
import os       # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import marshal  # –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª –∏ –∏—Ö —á—Ç–µ–Ω–∏—è
import dotenv   # –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
from aiogram import Bot, Dispatcher, executor, types  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Telegram

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ  –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
dotenv.load_dotenv()            # –ø–æ–¥–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("token")  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
bot = Bot(token=API_TOKEN)      # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
dp = Dispatcher(bot)            # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–æ—Ç–∞
launch_on_message = {}          # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Ç–∞
temp = {}                       # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
menu_markup.add(types.KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"))
menu_markup.add(types.KeyboardButton("üëÅ‚Äç –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"))
menu_markup.add(types.KeyboardButton("üßë‚Äçüîß –ü—Ä–æ—Ñ–∏–ª—å"))

settings_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_markup.row(types.KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∑–∞–º–µ—Ç–æ–∫"))
settings_markup.add(types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"))
settings_markup.add(types.KeyboardButton("‚ú® M–µ–Ω—é"))


# –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞
async def on_ready(_):
    me = await bot.get_me()
    print(f"{me.full_name} is online")


# —É–¥–æ–±–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
def get_note(_id: int, filename: str):
    try:
        with open(f"Users/{_id}/{filename}", "rb") as f:
            return marshal.loads(f.read())
    except:
        return None


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['start'])  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã start
async def on_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.")
    dirname = str(message.from_user.id)
    if dirname not in os.listdir("Users"):
        os.makedirs(f"Users/{dirname}")
    await on_message(message)


# –∫–æ–º–∞–Ω–¥—ã, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∫–Ω–æ–ø–∫–∞–º–∏
async def add_new_note3(message: types.Message):  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏(–∫–æ–Ω–µ—Ü)
    if not message.text:
        return
    if message.text != "üëå –ö–∞–∫ —Å–µ–π—á–∞—Å":
        with open(f"Users/{message.from_user.id}/{temp[message.from_user.id]}.data", "rb") as f:
            note = marshal.loads(f.read())
        note["content"] = message.html_text
        with open(f"Users/{message.from_user.id}/{temp[message.from_user.id]}.data", "wb") as f:
            f.write(marshal.dumps(note))
    await message.answer("‚ú® –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    global launch_on_message
    del launch_on_message[message.from_user.id]
    if f"{message.from_user.id}_{temp[message.from_user.id]}" in temp:
        await temp[f"{message.from_user.id}_{temp[message.from_user.id]}"].edit_text("–ó–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        del temp[f"{message.from_user.id}_{temp[message.from_user.id]}"]
    del temp[message.from_user.id]
    await on_message(message)


async def add_new_note2(message: types.Message):  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏(–æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)
    if not message.text:
        return
    if len(message.text) > 30:
        return await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∫–æ—Ä–æ—á–µ"
        )
    if message.from_user.id not in temp:
        temp[message.from_user.id] = message.message_id
    try:
        with open(f"Users/{message.from_user.id}/{temp[message.from_user.id]}.data", "rb") as f:
            note = marshal.loads(f.read())
    except:
        note = {"title": "Untitled", "content": "None"}
    note["title"] = message.text
    with open(f"Users/{message.from_user.id}/{temp[message.from_user.id]}.data", "wb") as f:
        f.write(marshal.dumps(note))
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add(types.KeyboardButton("üëå –ö–∞–∫ —Å–µ–π—á–∞—Å"))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏", reply_markup=markup)
    global launch_on_message
    launch_on_message[message.from_user.id] = add_new_note3


@dp.message_handler(text=["‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"])
async def add_new_note(message: types.Message, user_id=None):  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏(–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    if not user_id:
        user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add(types.KeyboardButton("üëå –ö–∞–∫ —Å–µ–π—á–∞—Å"))
    await message.answer(
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º",
        reply_markup=markup
    )
    global launch_on_message
    launch_on_message[user_id] = add_new_note2


@dp.message_handler(text=["üëÅ‚Äç –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"])
async def view_notes(message: types.Message):  # –ø–æ–∫–∞–∑ –∑–∞–º–µ—Ç–æ–∫
    markup = types.InlineKeyboardMarkup(row_width=2)
    path = f"Users/{message.from_user.id}"
    if os.name == "nt":
        path = path.replace("/", "\\")
    file_list = os.listdir(path)
    _reverse = False
    if "reverse" in file_list:
        _reverse = True
        file_list.remove("reverse")
    file_list = [os.path.join(path, i) for i in file_list]
    notes = sorted(file_list, key=os.path.getmtime, reverse=_reverse)
    notes = [i[len(path)+1:] for i in notes]
    del file_list
    if len(notes) == 0:
        return await message.answer("üóí –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
    num = 3
    if len(notes) < 6:
        num = int(float((len(notes) + 1) / 2))
    for i in range(num):
        _id = message.from_user.id
        note1 = get_note(_id, notes[i * 2])
        try:
            note2 = get_note(_id, notes[i * 2 + 1])
        except IndexError:
            note2 = None
        button1 = types.InlineKeyboardButton(
            note1.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            callback_data=f"ViewNote_{notes[i * 2]}"
        )
        row = [button1]
        if note2:
            button2 = types.InlineKeyboardButton(
                note2.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                callback_data=f"ViewNote_{notes[i * 2 + 1]}"
            )
            row.append(button2)
        markup.row(*row)
    if len(notes) > 6:
        button_next = types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°", callback_data="NextPage_6")
        markup.row(button_next)
    await message.answer("üóí –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏(—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ)", reply_markup=markup)


@dp.message_handler(text=["üßë‚Äçüîß –ü—Ä–æ—Ñ–∏–ª—å"])
async def settings(message: types.Message):  # –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user = message.from_user
    mention = f"({user.mention})" if user.mention else ""
    await message.answer(f"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {user.full_name} {mention}

–ó–∞–º–µ—Ç–æ–∫: {len(os.listdir(f"Users/{user.id}"))}
ID: {user.id}
""", reply_markup=settings_markup)


@dp.message_handler(text="üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")  # –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
async def delete_data(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.insert(types.InlineKeyboardButton("–î–∞", callback_data="DeleteUserData"))
    markup.insert(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="OpenMenu"))
    await message.answer("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å", reply_markup=markup)


@dp.message_handler(text=["üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∑–∞–º–µ—Ç–æ–∫"])
async def reverse(message: types.Message):  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–º–µ—Ç–æ–∫
    if "reverse" in os.listdir(f"Users/{message.from_user.id}"):
        os.remove(f"Users/{message.from_user.id}/reverse")
    else:
        with open(f"Users/{message.from_user.id}/reverse", "w") as f:
            f.write("")
    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")

@dp.message_handler()
async def on_message(message: types.Message):  # –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
    if message.from_user.id in launch_on_message:
        return await launch_on_message[message.from_user.id](message)
    await message.answer("‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)


# –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π Inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def callback_handler(callback: types.CallbackQuery):
    if callback.data == "OpenMenu":  # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–í –º–µ–Ω—é"
        await callback.message.answer("‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)
    elif callback.data == "DeleteThis":  # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    elif callback.data == "DeleteUserData":  # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for filename in os.listdir(f"Users/{callback.from_user.id}"):
            try:
                path = f"Users/{callback.from_user.id}/{filename}"
                os.remove(path)
            except:
                pass
        await callback.message.answer("‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)
        return await callback.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—Å —É–¥–∞–ª–µ–Ω—ã", show_alert=True)
    elif callback.data.startswith("NextPage"):  # –ª–∏—Å—Ç–∞–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–º–µ—Ç–æ–∫
        num = float(int(callback.data[9:]) / 2)
        num2 = float(num + 3)
        notes = os.listdir(f"Users/{callback.from_user.id}")
        markup = types.InlineKeyboardMarkup(row_width=2)
        if num2 * 2 > len(notes):
            num2 = float((len(notes) + 1) / 2)
        for i in range(int(num), int(num2)):
            _id = callback.from_user.id
            note1 = get_note(_id, notes[i * 2])
            try:
                note2 = get_note(_id, notes[i * 2 + 1])
            except IndexError:
                note2 = None
            button1 = types.InlineKeyboardButton(
                note1.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                callback_data=f"ViewNote_{notes[i * 2]}"
            )
            row = [button1]
            if note2:
                button2 = types.InlineKeyboardButton(
                    note2.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    callback_data=f"ViewNote_{notes[i * 2 + 1]}"
                )
                row.append(button2)
            markup.row(*row)
        button_back = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"PrevPage_{int(float(num * 2 - 6))}")
        row = [button_back]
        if len(notes) > num2 * 2:
            button_next = types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°", callback_data=f"NextPage_{int(float(num2 * 2))}")
            row.append(button_next)
        markup.row(*row)
        await callback.message.edit_reply_markup(markup)
    elif callback.data.startswith("PrevPage"):  # –ª–∏—Å—Ç–∞–Ω–∏–µ –Ω–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–º–µ—Ç–æ–∫
        num = float(int(int(callback.data[9:])) / 2)
        num2 = float(num + 3)
        notes = os.listdir(f"Users/{callback.from_user.id}")
        markup = types.InlineKeyboardMarkup(row_width=2)
        if num2 * 2 > len(notes):
            num2 = float((len(notes) + 1) / 2)
        for i in range(int(num), int(num2)):
            _id = callback.from_user.id
            note1 = get_note(_id, notes[i * 2])
            try:
                note2 = get_note(_id, notes[i * 2 + 1])
            except IndexError:
                note2 = None
            button1 = types.InlineKeyboardButton(
                note1.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                callback_data=f"ViewNote_{notes[i * 2]}"
            )
            row = [button1]
            if note2:
                button2 = types.InlineKeyboardButton(
                    note2.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    callback_data=f"ViewNote_{notes[i * 2 + 1]}"
                )
                row.append(button2)
            markup.row(*row)
        row = []
        if num * 2 - 6 >= 0:
            button_back = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"PrevPage_{int(float(num * 2 - 6))}")
            row.append(button_back)
        if len(notes) > num2 * 2:
            button_next = types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°", callback_data=f"NextPage_{int(float(num2 * 2))}")
            row.append(button_next)
        markup.row(*row)
        await callback.message.edit_reply_markup(markup)
    elif callback.data.startswith("ViewNote"):  # –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
        _id = callback.from_user.id
        filename = callback.data[9:]
        note = get_note(_id, filename)
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.insert(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"EditNote_{filename}"))
        markup.insert(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"RequestDelete_{filename}"))
        await callback.message.edit_text(
            f"<strong>{note['title']}</strong>\n\n{note['content']}",
            parse_mode=types.ParseMode.HTML,
            reply_markup=markup
        )
    elif callback.data.startswith("EditNote"):  # –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
        filename = callback.data[9:-5]
        global temp
        temp[f"{callback.from_user.id}_{filename}"] = callback.message
        temp[callback.from_user.id] = filename
        await add_new_note(callback.message, callback.from_user.id)
    elif callback.data.startswith("RequestDelete"):  # —Å–ø—Ä–æ—Å–∏—Ç—å –æ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏
        filename = callback.data[14:]
        markup = types.InlineKeyboardMarkup()
        markup.insert(types.InlineKeyboardButton("–î–∞", callback_data=f"DeleteNote_{filename}"))
        markup.insert(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="DeleteThis"))
        await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?", reply_markup=markup)
        temp[-1*callback.from_user.id] = callback.message.message_id
    elif callback.data.startswith("DeleteNote"):  # —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
        filename = callback.data[11:]
        path = f"Users/{callback.from_user.id}/{filename}"
        os.remove(path)
        await callback.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ", show_alert=True)
        await callback.message.delete()
        await bot.delete_message(callback.from_user.id, temp[-1*callback.from_user.id])
        return
    else:
        return await callback.answer("ErrCode 404\nUnknown callback data")
    await callback.answer()


# –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_ready)
